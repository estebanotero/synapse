{
	"name": "Notebook CSV to Parquet",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ApacheSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "89a05542-74d7-464d-962c-8c29c5c35166"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/32766ebc-7575-41b0-9fa7-5ddb6609a095/resourceGroups/grupo_recurso_gomc/providers/Microsoft.Synapse/workspaces/workspacedesarrollo/bigDataPools/ApacheSparkPool",
				"name": "ApacheSparkPool",
				"type": "Spark",
				"endpoint": "https://workspacedesarrollo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ApacheSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Transformo un CSV a archivo Parquet"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark # configuro el lenguaje que voy a utilizar en el bloque\r\n",
					"\r\n",
					"# Armo un dataframe con los dato del CSV (si tiene headers lo tengo que especificar , header=True)\r\n",
					"df = spark.read.load('abfss://gomc@storageaccdesarrollo.dfs.core.windows.net/TC_1812.csv', format='csv')\r\n",
					"\r\n",
					"# Muestro las primeras 10 lineas del dataframe\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# Nuevos nombres de columnas\r\n",
					"lista_titulos = [\"Fecha\", \"ARS\", \"BRL\", \"EUR\", \"CLP\", \"PYG\", \"UYU\",\"Base\"]\r\n",
					"\r\n",
					"# Asignar nuevos nombres a las columnas\r\n",
					"for i, nombre_columans in enumerate(lista_titulos):\r\n",
					"    df = df.withColumnRenamed(df.columns[i], nombre_columans)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Muestro el dataframe con los nuevos nombres\r\n",
					"df.show()"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# Tomo el dataframe y lo convierto en un archivo Parquet\r\n",
					"df.write.option(\"header\",True).parquet('abfss://gomc@storageaccdesarrollo.dfs.core.windows.net/tipocambio')"
				],
				"execution_count": 6
			}
		]
	}
}